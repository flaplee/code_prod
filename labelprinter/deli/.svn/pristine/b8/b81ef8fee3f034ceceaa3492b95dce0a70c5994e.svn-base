<?php
namespace app\admin\model;

use app\admin\model\Base;

class Member extends Base
{

//自动填充时间
    protected $autoWriteTimestamp = false;



    public function getListData($param=null){
        $map =[];
        $page =(isset($param['page']) && intval($param['page'])>0)?intval($param['page']):1;
        $page_size=(isset($param['limit']) && intval($param['limit'])>0)?intval($param['limit']):10;

        if(isset($param['reg_platform']) && !empty($param['reg_platform'])){
            $map['reg_platform']=$param['reg_platform'];
        }
        if(isset($param['name'])){
            $map['name']=$param['name'];
        }
        //   print_r($param);exit;
        $count =$this->where($map)->count();
        $sql =$this->where($map)->limit(($page-1)*$page_size.','.$page_size)->buildSql();
        $result =$this->query($sql);
        return $this->generalResult($result,$count);
    }
    public function __formatList($list = null) {
        if(!empty($list)){
            foreach($list as $k=>$v){
                $list[$k]['status']=$v['status']==1?"正常":"失效";
                $list[$k]['type']=$v['type']==2?"启用":"关闭";
                if(!empty($list[$k]['reg_platform']) && $list[$k]['reg_platform']==1){
                    $list[$k]['reg_platform']='ios';
                }
                if(!empty($list[$k]['reg_platform']) && $list[$k]['reg_platform']==2){
                    $list[$k]['reg_platform']='android';
                }
                if(!empty($list[$k]['reg_platform']) && $list[$k]['reg_platform']==3){
                    $list[$k]['reg_platform']='其他';
                }
                if(!empty($list[$k]['create_time'])){
                    $list[$k]['create_time']=date('Y-m-d H:m:s',$list[$k]['create_time']);
                }
                if(!empty($list[$k]['last_login_time'])){
                    $list[$k]['last_login_time']=date('Y-m-d H:m:s',$list[$k]['last_login_time']);
                }
            }
            return $list;
        }
    }

    /*更新之前
     *
     */
    public function __my_before_update(&$data){
        if(empty($data['newpassword'])){
            $this->setError('请输入重置密码');
            return false;
        }
        if(empty($data['renewpassword'])){
            $this->setError('请再次输入重置密码');
            return false;

        }
        if($data['newpassword']!==$data['renewpassword']){
            $this->setError('您两次输入的密码不一致');
            return false;
        }
        else{
            $res['password']=md5($data['newpassword']);
            $result=db('Member')->where('id',$data['id'])->update($res);
//            if($result){
                unset($data['newpassword']);
                unset($data['renewpassword']);
                return true;
//            }else{
//                $this->setError('请输入新的密码');
//                return false;
//            }

        }
    }

    /*插入之前
     *
     */

    public function __my_before_insert(&$data){
        return TRUE;
    }
    public function getRegPlatformList(){
        $map=[];
        $result = db($this->getTheTable())->where($map)->field('reg_platform')->group('reg_platform')->select();
        foreach($result as $k=>$v){
            switch ($result[$k]['reg_platform']){
                case 1:
                    $result[$k]['reg_platform']='ios';break;
                case 2:
                    $result[$k]['reg_platform']='android';break;
                case 3:
                    $result[$k]['reg_platform']='其他';break;
                default:
                    $result='';
            }
        }
//        var_dump($result);exit();
        return $result;
    }
    
    public function saveNewPwd($account,$password){
        $data['account']=$account;
        $data1['password']=$password;
        $this->where($data)->update($data1);
        return true;
    }
    
}